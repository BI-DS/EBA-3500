n = x.size # equals 1000.
n_reps = 1000
boots = rng.sample(x, (n, n_reps))
boots.dim
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 1000
boots = rng.choice(x, (n, n_reps))
boots.dim
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 1000
boots = rng.choice(x, (n, n_reps))
boots.ndim
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 1000
boots = rng.choice(x, (n, n_reps))
boots.shape
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 100
boots = rng.choice(x, (n, n_reps))
boots.shape
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 100
boots = rng.choice(x, (n, n_reps))
boots.shape
means = x.mean(axis = 0)
means = x.mean(axis = 0)
means
means = boots.mean(axis = 0)
means
means = boots.mean(axis = 0)
means.shape
means = boots.mean(axis = 1)
means.shape
means = boots.mean(axis = 1)
means
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 100
boots = rng.choice(x, (n, n_reps), replace=True)
boots.shape
means = boots.mean(axis = 1)
means
x = supermarket["gross margin percentage"]
n = x.size # equals 1000.
n_reps = 100
boots = rng.choice(x, (n, n_reps))
boots.shape
boots
x = supermarket["gross income"]
n = x.size # equals 1000.
n_reps = 100
boots = rng.choice(x, (n, n_reps))
boots.shape
boots
means = boots.mean(axis = 1)
means
import seaborn as sns
import matplotlib.pylab as plt
means = boots.mean(axis = 1)
sns.histplot(means, stat="density")
plt.show()
import seaborn as sns
import matplotlib.pylab as plt
means = boots.mean(axis = 1) - x.mean()
sns.histplot(means, stat="density")
plt.show()
plt.clf()
import seaborn as sns
import matplotlib.pylab as plt
means = boots.mean(axis = 1) - x.mean()
sns.histplot(means, stat="density")
plt.show()
hist.std()
means.std()
means.std()
np.quantile(x, c(0.1, 0.9))
np.quantile(x, (0.1, 0.9))
np.quantile(means, (0.1, 0.9))
np.quantile(means, (0.1, 0.9)) + x.mean()
reticulate::repl_python()
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
import os
os.getcwd()
supermarket = pd.read_csv("supermarket_sales.csv")
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv(r"supermarket_sales.csv")
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
n = x.size()
samples = x.choice((n_reps, n))
x = supermarket.Quantity
n = x.size()
samples = x.choice((n_reps, n))
x = supermarket.Quantity
n = x.size()
samples = np.choice(x, (n_reps, n))
x = supermarket.Quantity
n = x.size()
samples = np.random.choice(x, (n_reps, n))
n_reps = 1000
x = supermarket.Quantity
n = x.size()
samples = np.random.choice(x, (n_reps, n))
x.len
x.size
x = supermarket.Quantity
n = x.size
samples = np.random.choice(x, (n_reps, n))
sample.mean(axis=1)
samples.mean(axis=1)
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
def bootstrap_means(x, rng, n_reps=1000):
""" Bootstrap the means of some data. """
n = x.size
samples = np.random.choice(x, (n_reps, n))
return samples.mean(axis=1)
bootstrap_means(supermarket.Quantity)
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
def bootstrap_means(x, rng, n_reps=1000):
""" Bootstrap the means of some data. """
n = x.size
samples = np.random.choice(x, (n_reps, n))
return samples.mean(axis=1)
bootstrap_means(supermarket.Quantity, rng)
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
def bootstrap_means(x, rng, n_reps=1000):
""" Bootstrap the means of some data. """
n = x.size
samples = np.random.choice(x, (n_reps, n))
return x.means() - samples.mean(axis=1)
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
sns.histplot(bootstrap_means(supermarket["Unit Price"], rng), stat = "density")
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
def bootstrap_means(x, rng, n_reps=1000):
""" Bootstrap the means of some data. """
n = x.size
samples = np.random.choice(x, (n_reps, n))
return x.mean() - samples.mean(axis=1)
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
sns.histplot(bootstrap_means(supermarket["Unit Price"], rng), stat = "density")
sj√∏er
supermarket
supermarket.describe()
supermarket.columns
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
rng = np.random.default_rng(seed=313)
def bootstrap_means(x, rng, n_reps=1000):
""" Bootstrap the means of some data. """
n = x.size
samples = np.random.choice(x, (n_reps, n))
return x.mean() - samples.mean(axis=1)
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
sns.histplot(bootstrap_means(supermarket["Unit price"], rng), stat = "density")
plt.show()
## Exercise 2
import scipy.stats as st
x = supermarket.Quantity
n = x.size
plt.clf()
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
z = np.linspace(-2, 2, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std/np.sqrt(n)))
## Exercise 2
import scipy.stats as st
x = supermarket.Quantity
n = x.size
plt.clf()
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
z = np.linspace(-2, 2, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
## Exercise 2
import scipy.stats as st
x = supermarket["Unit price"]
n = x.size
plt.clf()
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
z = np.linspace(-2, 2, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
## Exercise 2
import scipy.stats as st
x = supermarket["Unit price"]
n = x.size
plt.clf()
sns.histplot(bootstrap_means(supermarket.Quantity, rng), stat = "density")
z = np.linspace(-2, 2, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
## Exercise 2
import scipy.stats as st
x = supermarket["Unit price"]
n = x.size
plt.clf()
sns.histplot(bootstrap_means(x, rng), stat = "density")
z = np.linspace(-2, 2, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
## Exercise 2
import scipy.stats as st
x = supermarket["Unit price"]
n = x.size
plt.clf()
sns.histplot(bootstrap_means(x, rng), stat = "density")
z = np.linspace(-3, 3, 100)
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs
mean
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs /
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
mean
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.plot(number, st.poiss.pmf(number, mean))
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.plot(number, st.poisson.pmf(number, mean))
plt.plot(number, st.poisson.pmf(number, mean))
plt.plot(number, obs /)
plt.show()
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.clf()
plt.plot(number, st.poisson.pmf(number, mean))
plt.plot(number, obs /)
plt.show()
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.clf()
plt.plot(number, st.poisson.pmf(number, mean))
plt.plot(number, obs / obs.sum())
plt.show()
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.clf()
plt.plot(number, st.poisson.pmf(number, mean))
plt.bar(number, obs / obs.sum())
plt.show()
number = np.array([0, 1, 2, 3, 4, 5, 6, 7])
obs = np.array([229, 211, 93, 35, 7, 0, 0, 1])
mean = number @ obs / obs.sum()
plt.clf()
plt.plot(number, st.poisson.pmf(number, mean))
plt.bar(number, obs / obs.sum(), color = "orange")
plt.show()
1 - 3**4
1 - 1/3**4
samples = np.choice([1,3,4,6], (1000, 4))
samples = np.random.choice([1,3,4,6], (1000, 4))
samples.max(axis = 1)
samples.max(axis = 1) == 6
mean(samples.max(axis = 1) == 6)
np.mean(samples.max(axis = 1) == 6)
1 - 3**4/4**4
3**4/4**4
samples.sort(axis=1)
samples
samples[0]
samples[:,0]
# This is the probability of sampling 2 exactly twice, i.e.,
# 1^4*3^4/4^4
samples.sort(axis=1)
((samples[:,0] == 1) * (samples[:,1] == 1)).mean()
3**4/4**4
# This happens if 6 is included in the data set. That's 1 - 3^4/4^4
samples = np.random.choice([1,3,4,6], (10000, 4))
np.mean(samples.max(axis = 1) == 6)
# This is the probability of sampling 2 exactly twice, i.e.,
# 1^4*3^4/4^4
samples.sort(axis=1)
((samples[:,0] == 1) * (samples[:,1] == 1)).mean()
3**4/4**4
2**4/4**4
(1/4)**4
(1/4)**2
(1/4)**2 * (3/4)**2
3**2/4**4
samples[:,1] == 1)
samples[:,1] == 1
mean(samples[:,1] == 1)
np.mean(samples[:,1] == 1)
((samples[:,0] == 1) * (samples[:,1] == 1)).mean()
samples[:,1]
samples
samples[:, 1]
samples[:, 3]
samples[:, 4]
samples[:, 2]
((samples[:,0] == 1) && (samples[:,1] == 1)).mean()
((samples[:,0] == 1) & (samples[:,1] == 1)).mean()
1/2**2
1/4**2
samples.sort(axis=1)
((samples[:,0] == 1) & (samples[:,1] == 1) & (samples[:,2] != 1) &
(samples[:,3] != 1)).mean()
(1/4)**2
(1/4)**2 * (3/4)**2
samples[:, 0]
samples[:, 0].size
samples.sort(axis=1)
((samples[:,0] == 1) & (samples[:,1] == 1) & (samples[:,2] != 1) &
(samples[:,3] != 1)).mean()
(1/4)**2
(1/4)**2 * (3/4)**2
(samples[:,0] == 1) & (samples[:,1] == 1) & (samples[:,2] != 1) &
(samples[:,3] != 1)
# This is the probability of sampling 1 exactly twice, i.e.,
# 1^2*3^2/4^4
samples.sort(axis=1)
((samples[:,0] == 1) & (samples[:,1] == 1) & (samples[:,2] != 1) & (samples[:,3] != 1)).mean()
samples
samples[:, 2] == 1
sum(samples[:, 2] == 1)
samples[:,0] == 1) * (samples[:,1] == 1)
(samples[:,0] == 1) * (samples[:,1] == 1)
sum((samples[:,0] == 1) * (samples[:,1] == 1))
np.sum((samples[:,0] == 1) * (samples[:,1] == 1))
np.sum((samples[:,1] == 1))
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
pd.read_csv("supermarket_sales.csv")
supermarket.describe()
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size()
n_reps = 1000
rng = np.random.default_rng(seed = 313)
samples = np.choice(x, (n_reps, n))
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size()
n_reps = 1000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size
n_reps = 1000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
samples
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size
n_reps = 1000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
means = samples.mean(axis=1)
means.shape
n
n_reps
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size
n_reps = 10000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
means = samples.mean(axis=1)
n_reps
means.shape
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size
n_reps = 10000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
means = samples.mean(axis=1)
def bootstrapper(x, rng, n_reps = 1000):
""" Bootstrap the means of x n_reps times. """
n = x.size
samples = rng.choice(x, (n_reps, n))
return samples.mean(axis=1)
sns.histplot(bootstrapper(supermarket.Quantity, rng))
sns.histplot(bootstrapper(supermarket["Unit price"], rng))
plt.show()
plt.clf()
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
import pandas as pd
supermarket = pd.read_csv("supermarket_sales.csv")
x = supermarket.Quantity
n = x.size
n_reps = 10000
rng = np.random.default_rng(seed = 313)
samples = rng.choice(x, (n_reps, n))
means = samples.mean(axis=1)
def bootstrapper(x, rng, n_reps = 1000):
""" Bootstrap the means of x n_reps times. """
n = x.size
samples = rng.choice(x, (n_reps, n))
return x.mean() - samples.mean(axis=1)
sns.histplot(bootstrapper(supermarket.Quantity, rng))
sns.histplot(bootstrapper(supermarket["Unit price"], rng))
plt.show()
## Exercise 2
import scipy.stats as st
z = np.linspace(-3, 3, 100)
plt.clf()
sns.histplot(bootstrapper(supermarket["Unit price"], rng), stat = "density")
plt.plot(z, st.norm.pdf(z))
plt.show()
## Exercise 2
import scipy.stats as st
z = np.linspace(-3, 3, 100)
x = supermarket["Unit price"]
n = x.size()
plt.clf()
sns.histplot(bootstrapper(x, rng), stat = "density")
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
boots.std()
import scipy.stats as st
z = np.linspace(-3, 3, 100)
x = supermarket["Unit price"]
n = x.size()
plt.clf()
boots = bootstrapper(x, rng)
sns.histplot(boots, stat = "density")
plt.plot(z, st.norm.pdf(z, 0, x.std()/np.sqrt(n)))
plt.show()
boots.std()
boots.std()
x.std()/np.sqrt(n)
