---
title: "Lecture 3: Linear regression"
author: Jonas Moss
date: last-modified
execute:
  echo: true
jupyter: python3
reference-location: margin
citation-location: margin
---

# Lecture 3: Linear regression

## Misc
* Exponetial notation. Simple formatting
* [f strings](https://realpython.com/python-f-strings/) for formatting.
    * The `'g'` option for scientific notation.
## ANOVA
* Comparing models:
    * Can
* $F$-test for one-hot-encoded categorical variables.
* 

## Why
"The computational cost involved in fitting such models (via the
solution of a linear system) is usually modest and always predictable. They
typically require a minimum of tuning. The transparency of the functional
form lends itself naturally to interpretation. At a minimum, linear models
are often an obvious initial attempt against which the performance of more
complex models is benchmarked. "

```{python}
#| echo: False
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
import statsmodels.api as sm
```

```{python}
mtcars = sm.datasets.get_rdataset("mtcars").data
```


```{python}
from statsmodels.stats.anova import anova_lm
mod = smf.ols("mpg ~ cyl + disp + wt + qsec", data = mtcars).fit()
mod_small = smf.ols("mpg ~ qsec", data = mtcars).fit()
anova_lm(mod_small, mod)
```

```{python}
#| echo: false
#| output: asis
from IPython.display import Markdown
def fmt(x, inline = True):
    out = f"${x:.2g}}}$".replace("e","\\cdot 10^{")
    return Markdown(out) if inline else out
x = anova_lm(mod_small, mod)["Pr(>F)"][1]
```

The resulting *p*-value is `{python} fmt(x)`.