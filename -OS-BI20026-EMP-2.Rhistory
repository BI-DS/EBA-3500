import numpy as np
rng = np.random.default_rng(seed=313)
n = 100
n_reps = 10000
x = rng.exponential(1/2, (n_reps, n))
lambda_1_hats = 1 / x.mean(axis = 1)
lambda_2_hats = np.log(2) / np.median(x, axis = 1)
lambda_3_hats = np.sqrt(1 / x.var(axis = 1))
lambda_1_hats
import numpy as np
rng = np.random.default_rng(seed=313)
n = 100
n_reps = 10000
lambda0 = 2
mse = lambda x: np.mean((x - lambda0)**2)
x = rng.exponential(1/lambda0, (n_reps, n))
lambda_1_hats = 1 / x.mean(axis = 1)
lambda_2_hats = np.log(2) / np.median(x, axis = 1)
lambda_3_hats = np.sqrt(1 / x.var(axis = 1))
mse(lambda_1_hats)
mse(lambda_2_hats)
mse(lambda_3_hats)
import numpy as np
rng = np.random.default_rng(seed=313)
n = 100
n_reps = 10000
lambda0 = 2
mse = lambda x: np.mean((x - lambda0)**2)
x = rng.exponential(1/lambda0, (n_reps, n))
lambda_1_hats = 1 / x.mean(axis = 1)
lambda_2_hats = np.log(2) / np.median(x, axis = 1)
lambda_3_hats = np.sqrt(1 / x.var(axis = 1))
mse(lambda_1_hats)
mse(lambda_2_hats)
mse(lambda_3_hats)
import numpy as np
rng = np.random.default_rng(seed=313)
n = 100
n_reps = 10000
lambda0 = 2
mse = lambda x: np.mean((x - lambda0)**2)
x = rng.exponential(1/lambda0, (n_reps, n))
lambda_1_hats = 1 / x.mean(axis = 1)
lambda_2_hats = np.log(2) / np.median(x, axis = 1)
lambda_3_hats = np.sqrt(1 / x.var(axis = 1))
mse(lambda_1_hats)
mse(lambda_2_hats)
mse(lambda_3_hats)
quarto render
reticulate::repl_python()
import numpy as np
import matplotlib as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
import numpy as np
import matplotlib as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
plt.plot(x, l(x))
plt.show
import numpy as np
import matplotlib as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
plt.plot(x, l(x))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
plt.plot(x, l(x))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
lambs = np.linspace(0.001, 2, by = 0.01)
plt.plot(x, l(x))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
lambs = np.linspace(0.001, 2, by = 0.01)
plt.plot(lambs, l(lambs))
plt.show()
lambs = np.linspace(0.001, 2, by = 0.01)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * sum(x)
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
lambss
lambs
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 100)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 50)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
plt.clf()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
x
x.mean()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.len() * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.size() * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.size() * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
x.size()
x.size
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.size * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.size * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.clf()
plt.plot(lambs, l(lambs))
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, 10)
l = lambda lamb: x.size * np.log(lamb) - lamb * x.sum()
lambs = np.linspace(0.001, 2, 100)
plt.clf()
plt.plot(lambs, l(lambs))
plt.axvline(x=1)
plt.show()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
x.sum(axis = 1)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
x.sum(axis = 0)
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
1/x.mean(axis = 0)
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
log(2) / lambda_hats
x.median(axis = 1)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
log(2) / lambda_hats
np.median(x, axis = 1)
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
median_hat_ml = log(2) / lambda_hats
median_hat_samp = np.median(x, axis = 0)
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
median_hat_ml = np.log(2) / lambda_hats
median_hat_samp = np.median(x, axis = 0)
mse(median_hat_ml)
mse = lambda x: np.mean((x - log(2))**2)
mse(median_hat_ml)
mse(median_hat_samp)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
median_hat_ml = np.log(2) / lambda_hats
median_hat_samp = np.median(x, axis = 0)
mse = lambda x: np.mean((x - np.log(2))**2)
mse(median_hat_ml)
mse(median_hat_samp)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
median_hat_ml = np.log(2) / lambda_hats
median_hat_samp = np.median(x, axis = 0)
mse = lambda x: np.mean((x - np.log(2))**2)
mse(median_hat_ml)
mse(median_hat_samp)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(1, (10, 1000))
lambda_hats = 1/x.mean(axis = 0)
median_hat_ml = np.log(2) / lambda_hats
median_hat_samp = np.median(x, axis = 0)
mse = lambda x: np.mean((x - np.log(2))**2)
mse(median_hat_ml)
mse(median_hat_samp)
mse(median_hat_ml) / mse(median_hat_samp)
mse(median_hat_samp) / mse(median_hat_ml)
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (10, 1000))
true_variance = (-3 - 2)**2 / 12
hat_ml = (x.max(axis = 0) - x.min(x))
hat_samp = np.median(x, axis = 0)
hat_ml = (x.max(axis = 0) - x.min(x, axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
hat_ml
true_variance
hat_samp
hist(hat_samp)
plt.hist(hat_samp)
plt.show()
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (10, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_ml)
mse(hat_samp)
hat_ml.mean()
hat_samp.mean()
var(hat_samp)
np.var(hat_samp)
np.var(hat_ml)
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_samp)
mse(hat_ml)
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (1000, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_samp)
mse(hat_ml)
mse(hat_samp) / mse(hat_ml)
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_samp)
mse(hat_ml)
mse(hat_samp) / mse(hat_ml)
reticulate::repl_python()
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
hat_samp
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_samp)
import numpy as np
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
mse(hat_samp) / mse(hat_ml)
runner(10)
import numpy as np
import matplotlib.pylab as plt
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
def runner(n):
""" Approximate the MSE of the variance for sample size n."""
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (100, 1000))
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
return mse(hat_samp) / mse(hat_ml)
runner(10)
import numpy as np
import matplotlib.pylab as plt
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
def runner(n):
""" Approximate the MSE of the variance for sample size n."""
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (n, 1000))
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
return mse(hat_samp) / mse(hat_ml)
runner(10)
import numpy as np
import matplotlib.pylab as plt
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
def runner(n):
""" Approximate the MSE of the variance for sample size n."""
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (n, 1000))
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
return mse(hat_samp) / mse(hat_ml)
runner(10)
runner(100)
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(n, [runner(n) for n in ns])
plt.show()
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(ns, [runner(n) for n in ns])
plt.show()
x = 1
lambda l(delta): mp.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 100)
plt.clf()
plt.plot(deltas, l(delta))
plt.show
x = 1
l = lambda delta: mp.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 100)
plt.clf()
plt.plot(deltas, l(delta))
plt.show
x = 1
l = lambda delta: mp.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show
x = 1
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show
x = 1
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show()
x = 1
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 10, 2)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show()
x = 1
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 2, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show
x = 1
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 2, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show()
x = 0.5
l = lambda delta: np.exp(-(x-delta)) * (x > delta)
deltas = np.linspace(0, 2, 100)
plt.clf()
plt.plot(deltas, l(deltas))
plt.show()
import numpy as np
import matplotlib.pylab as plt
true_variance = (-3 - 2)**2 / 12
mse = lambda x: np.mean((x - true_variance)**2)
def runner(n):
""" Approximate the MSE of the variance for sample size n."""
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (n, 1000))
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
return mse(hat_samp) / mse(hat_ml)
def runner(n):
""" Approximate the MSE of the variance for sample size n."""
rng = np.random.default_rng(seed=313)
x = rng.uniform(-3, 2, (n, 1000))
hat_ml = (x.max(axis = 0) - x.min(axis = 0))**2 / 12
hat_samp = np.var(x, axis = 0)
return mse(hat_samp) / mse(hat_ml)
mat
runner(10)
runner(100)
runner()
runner(5)
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(ns, [runner(n) for n in ns])
plt.show()
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(ns, [runner(n) for n in ns])
plt.show()
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(ns, [runner(n) for n in ns])
plt.show()
ns = (5, 10, 50, 100, 500, 1000, 5000, 10000)
plt.clf()
plt.plot(ns, [runner(n) for n in ns])
plt.show()
