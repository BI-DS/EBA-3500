---
title: "Solution to exercise 3.1"
author: Jonas Moss
date: last-modified
execute:
  echo: true
jupyter: python3
format:
  html: 
    theme: lumen
    fontsize: 1.1em
    linestretch: 1.7
    mainfont: "Verdana"
reference-location: margin
citation-location: margin
fig-cap-location: top
engine: jupyter
toc: true
lightbox: true
---

## (a)

::: {.callout-note icon=false appearance="simple"} 
## Description
We use the `auto` data in this exercise. Import and clean the data. 
:::


```{python}
# | echo: False
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
```

```{python}
# | echo: False
settings = {
    "grid.color": "#e0e0e0",
    "grid.linestyle": "--",
    "font.sans-serif": [
        "Museo Sans",
        "DejaVu Sans",
        "sans-serif",
    ],
    "axes.edgecolor": "#adadad",
    "axes.spines.right": True,
    "axes.spines.top": True,
}
sns.set_theme(style="whitegrid", rc=settings)

# Create an array with the colors you want to use
colors = ["#004178", "#0064b4", "#00aaff", "#cfaf70"]
colors = ["#022d50", "#e0bd77", "#00729c", "#666666", "#eaeaea"]


colors = [
    "#004178",
    "#c6a769",
    "#00729c",
    "#7e4667",
    "#008379",
    "#db9eb1",
    "#46a55b",
    "#e85456",
]
# Set your custom color palette
# sns.set_palette(sns.color_palette(colors, as_cmap=True))
sns.color_palette()
```

```{python}
#| echo: False
auto = pd.read_csv("data/Auto.csv", na_values="?", index_col="name").dropna()
auto.replace({"origin": {1: "American", 2: "European", 3: "Japanese"}}, inplace = True)
auto.head()
```

## (b)

::: {.callout-note icon=false appearance="simple"} 
## Description
Use the `smf.ols()` function to perform a simple linear regression with `mpg` as the response and horsepower as the predictor.
:::


```{python}
#| echo: False
fit=smf.ols("mpg~horsepower", data=auto).fit()
fit.rsquared   # Prediction strength.
fit.params     # Parameters
fit.pvalues    # p-values
fit.conf_int() # Confidence interval.
fit.predict({"horsepower": 98}) 
```

## (c)

::: {.callout-note icon=false appearance="simple"} 
## Description
Produce a scatterplot of feature and target with the fitted regression line on top.
:::


```{python}
sns.lmplot(auto, x="horsepower", y="mpg").set_axis_labels(
    "Horsepower", "Miles per gallon"
)
```

```{python}
sns.lmplot(
    auto[(auto["cylinders"] != 3) & (auto["cylinders"] != 5)],
    x="horsepower",
    y="mpg",
    hue="cylinders",
).set_axis_labels("Horsepower", "Miles per gallon")
```


## (d)
::: {.callout-note icon=false appearance="simple"} 
## Description
Make a residual plot for the regression model `mpg~horsepower`. Comment on any problems you see with the fit.

:::


```{python}
# | echo: False
# | fig-cap: "**The relationship between horsepower and miles per gallon is not linear**"

facet = sns.relplot(x=fit.predict(), y=auto["mpg"])
facet.set_axis_labels("Predicted miles per gallon", "Miles per gallon")
```


```{python}
# | echo: False
# | fig-cap: "**The residual plot of `mpg ~ horsepower` does not look nice**"

residuals = auto["mpg"] - fit.predict()
facet = sns.relplot(x=auto["mpg"], y=residuals)
facet.set_axis_labels("Predicted miles per gallon", "Miles per gallon")
```



```{python}
# | echo: False
# | fig-cap: "**American makes outnumber European and Japanese makes combined**"

g = sns.catplot(
    data=auto,
    kind="count",
    y="origin",
    alpha=0.99,
    orient="v",
    aspect=2,
    height=3,
)
g.despine(bottom=True)
g.set_axis_labels("", "")
```





```{python}
# | echo: False
# | fig-cap: "**American makes outnumber European and Japanese makes combined**"

sns.barplot(
    auto,
    y="mpg",
    x="origin",
    hue="cylinders",
)
```