# Exercise 5.4.9 {.unnumbered}

> We will now consider the Boston housing data set, from the ISLP library.

As always, we must load it up.

```{python}
import pandas as pd
boston = pd.read_csv("data/Boston.csv")
boston.head()
```

## (a)
> Based on this data set, provide an estimate for the population mean of medv. Call this estimate $\hat{\mu}$.

This can be done using the `mean` method.
```{python}
mu_hat = boston.medv.mean()
mu_hat
```

## (b)
> Provide an estimate of the standard error of $\hat{\mu}$. Interpret thisresult.

```{python}
import numpy as np
se_hat = boston.medv.std(ddof=1) / np.sqrt(boston.shape[0])
se_hat
```

To interpret the standard error one might use the "2SE" rule, which states that the
true population mean lies in the interval $\hat{\mu} - 2\hat{\textrm{SE}},\hat{\mu} + 2\hat{\textrm{SE}}$ with roughly $95\%$ confidence. It follows that we are roughly $95\%$ confident that the true population mean is in the interval.

```{python}
[mu_hat - 2*se_hat, mu_hat + 2*se_hat]
```

Thus we can be reasonably certain the true mean is approximately $22$ or thereabouts.

## (c)
> Now estimate the standard error of $\hat{\mu}$ using the bootstrap. How does this compare to your answer from (b)?

The bootstrapped standard error can be calculated as follows: First we make a bunch of bootstrapped means, then we calculate the standard error using them.

```{python}
def boot_se(data, rng, n_reps=1000):
  """ Bootstrap the standard error of the mean."""
  mean = data.mean()
  n = data.size
  boot_means = [rng.choice(data, n, replace = True).mean() for _ in range(n_reps)]
  return np.sqrt(((boot_means - mean)**2).mean())
  
rng = np.random.default_rng(seed=313)
se_boot_hat = boot_se(boston.medv, rng, n_reps=1000)
se_boot_hat
```

The standard errors almost indistinguishable, at least at this scale.

```{python}
se_boot_hat - se_hat
```

## (d)
>  Based on your bootstrap estimate from (c), provide a 95 % confdence interval for the mean of medv. Compare it to the results obtained by using Boston['medv'].std() and the two standard error rule (3.9).

Almost exactly the same solution as (b). Just change `se_hat` to `se_boot_hat`.
```{python}
[mu_hat - 2*se_boot_hat, mu_hat + 2*se_boot_hat]
```

## (e)
> Based on this data set, provide an estimate, $\hat{\mu}_\text{med}$, for the median value of medv in the population.

This can be done using the `median` method.
```{python}
med_hat = boston.medv.median()
med_hat
```

## (f)
> We now would like to estimate the standard error of µˆmed. Unfortunately, there is no simple formula for computing the standard error of the median. Instead, estimate the standard error of the median using the bootstrap. Comment on your fndings.

We modify the function in (d) ever so slightly. Exercise (g) is very similar to this one, so we generalize it to work for that as well. Here the `functional` tells the function exactly what estimator we want to bootstrap.
```{python}
def boot_se(data, rng, n_reps=1000, functional = np.median):
  """ Bootstrap the standard error of the mean."""
  median = functional(data)
  n = data.size
  boot_means = [functional(rng.choice(data, n, replace = True)) for _ in range(n_reps)]
  return np.sqrt(((boot_means - median)**2).mean())
```

Now we can apply the function:
```{python}
rng = np.random.default_rng(seed=313)
se_med_boot_hat = boot_se(boston.medv, rng, n_reps=1000)
se_med_boot_hat
```

**Extras:** The bootstrap does not perform as well for "discontinuous" statistics such as the median as it does for "smooth" ones such as the mean. In some cases it does not work at all, such as for the maximum of of a uniform distribution. The median does work though. If unsure wether the bootstrap works, run some simulations!

## (g)
> Based on this data set, provide an estimate for the tenth percentile of medv in Boston census tracts. Call this quantity µˆ0.1. (You can use the np.percentile() function.)

```{python}
pct_hat = np.percentile(boston.medv, 0.1)
pct_hat
```

## (h)
Using the function `boot_se` we defined in (f), we find
```{python}
rng = np.random.default_rng(seed=313)
f = lambda x: np.percentile(x, 0.1)
se_pct_boot_hat = boot_se(boston.medv, rng, n_reps=1000, functional = f)
se_pct_boot_hat
```